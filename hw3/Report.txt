Report



Name - Jay Bhatt 
SBU ID - 111491357


1. Test Environment

-	Linux 4.10.0-38-generic x86_64
	Distributor ID:	Ubuntu
	Description:	Ubuntu 16.04.3 LTS
	Release:		16.04
	Codename:		xenial


2. Compiler

-	gcc (Ubuntu 5.4.0-6ubuntu1~16.04.5) 5.4.0 20160609


3. Commands
   
-	Server 
	-	./pbproxy -l <listen_on_port> -k <enc_key_file_name> <host> <port_on_host>

	example for running on local machine
	-	"./pbproxy -l 3333 -k mykey localhost 22"

	This command is used to run the server, here the port 3333 is the one that the server will listen on, for incoming connections. 
	And once a connection is accepted then it connects to port 22 of localhost.

-	Client
	-	ssh -o "ProxyCommand ./pbproxy -k <enc_key_file_name> <proxy host> <proxy port>" [<username to choose for ssh>@]<ssh host>

	example for running on local machine
	-	ssh -o "ProxyCommand ./pbproxy -k mykey localhost 3333" localhost

	This command is used to run the proxy client using ssh ProxyCommand, here the port 3333 is where the client will connect, to use the 
	proxy and inturn that proxy-server will create a socket connection to ssh server for this client. The ssh server is specified by the <ssh host>
	It is also possible to set a particular username to ssh into the remote machine
	eg. ssh -o "ProxyCommand ./pbproxy -k mykey localhost 3333" jay-bhatt@<ip of remote machine>



ssh <--stdin/stdout--> pbproxy-c <--socket 1--> pbproxy-s <--socket 2--> sshd
\______________________________/                \___________________________/
             client                                        server           

4. Description of the Program
	
-	pbproxy.c 
	-	This code is the starting point for both client and server side proxy. 
	-	This function initiates the server if the -l option is specified otherwise it will initiate the client.
	-	The options are parsed using the getopt utility.		

-	server.h
	-	Contains the code to start the server
	-	Once the server is started, it makes a socket and binds it to the port specified by <listen_on_port> option.
 	-	It then listens for connections from client side proxy.
	-	It uses threads, to support multiple connections. 
	-	However, it listens for the incoming connections on the main thread and uses a while loop to do so.
	-	It will drop the incoming connection if the number of allowed connections limit is reached.
	-	Once a connection is established, it creates a new thread for the new connection and processes it there.
	-	The new thread, lets name it 'X', connects the new socket to sshd server.
	-	After connecting to the sshd server, the thread X, read the Iniialization vector[IV] from the client.
	-	This is used to initialize the encryption/decryption state.
	-	The key to be used for encryption/decryption is read from the file name specified by the -k option.
	-	The thread X, inturn creates a new thread, lets name it 'Y', to read the data from the client, decrypt it and send to the sshd server.
	-	However, the opposite stream of data, i.e. to read the data from the sshd server, encrypt it and send to the client is done on thread 'X'.				
	-	In each of the thread X and Y, there is a function call to sock_stream(), to manage the socket stream data, this function does that by using nested while loops. 

	Process flow handled by proxy server
	pbproxy-c ---> pbproxy-s (decrypt) ---> sshd
	pbproxy-c <--- pbproxy-s (encrypt) <--- sshd

-	client.h
	-	Contains the code to start the client and connect to server side proxy.
	-	Once a connection is established to the server-side proxy, the client generates 16 bytes of random data using the Rand_bytes() function of OpenSSL. 
	-	This is the Initialization Vector[IV]. This is sent to the proxy server.
	-	After sending the IV, the client calls the sock_stream() function to read the data from the STDIN, encrypt it and send to the proxy server.
	-	And similar to the above server code, this also creates a separate thread to read the data from the proxy server socket, decrypt it and send it to STDOUT. 
	-	This new thread also call the sock_stream() function to achieve the desired data flow.

	Process flow handled by proxy client
	STDIN ---> pbproxy-c (encrypt) ---> pbproxy-s
	STDOUT <-- pbproxy-c (decrypt) <--- pbproxy-s

-	helper.h
	-	This file contains the functions and data structures to encrypt and decrypt the data streams.
	-	The encryption/decryption is being done using the AES_ctr128_encrypt()/AES_ctr128_decrypt() functions of OpenSSL.
	-	It also contains the sock_stream() function, that handles the data streams and also the encryption/decryption process.

5. References

-	Link for client server socket program
	-	http://www.geeksforgeeks.org/socket-programming-cc/
	-	https://stackoverflow.com/questions/31303786/c-creating-endless-socket-connection-between-server-and-client-linux

-	Creating an echo server using sockets in C
    -	https://vcansimplify.wordpress.com/2013/03/14/c-socket-tutorial-echo-server/

-	Creating threads using pthreads and passing args to it in c
	-	http://timmurphy.org/2010/05/04/pthreads-in-c-a-minimal-working-example/

-	Reading Contents from file in C 
	-	http://stackoverflow.com/questions/174531/easiest-way-to-get-files-contents-in-c

-	AES encryption in CTR mode
	-	http://www.gurutechnologies.net/blog/aes-ctr-encryption-in-c/



