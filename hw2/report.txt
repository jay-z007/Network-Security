
IMPLEMENTATION : 
Step 1 - Check for all the commandline options passed by the user. And accordingly assign values to flags and variables.
		[I am doing this by using 'getopt' utility
			-i : optional argument [for interface name]
			-r : has a required argument, if the option is used [for offline pcap filename]
			-s : has a required argument, if the option is used [for a search string]
		] 

		Check for following things :
		a. -i and -r should not be mentioned together
		b. if -r is provided, whether the file exists
		c. Concatenating all non-argument words for the BPF filter expression


**If sniffing on a live interface
Step 2 - If the interface is not mentioned then find it using the pcap_lookupdev()

	Step 2a - Find the properties of the interface like network address and mask using pcap_lookupnet() 
	Step 2b - Open the session in the promiscuous mode using pcap_open_live()


** following steps are generic [for online and offline sniffing]
Step 3 - Compile the BPF filter using pcap_compile() and Apply the filter to the session handle using pcap_setfilter()

Step 4 - Start capturing packets using pcap_loop()

Step 5 - Every time a packet is captured, the function 'got_packet()' is called by the function 'pcap_loop()'

Step 6 - Declare all variables for the headers, and extract the headers using the pointer to the start of the serialized version of the packet data.
		Move the pointer after reading every header and check the protocol use the next appropriate header or check the payload.

Step 7 - Get the payload, and check for the occurance of the Search string [using strstr()] if provided
	Step 7a - If search string present and it occurs in the payload, then print the payload
	Step 7b - If the search string is present and it doesn't occur in the payload, then return to capturing the next packet
	Step 7c - If search string is not present then print the payload

Step 8 - If the specified number of packets are captured then pcap exits the loop

Step 9 - Close the sniffing session

Step 10 - Exit

##########################################################################################


FUNCTIONS USED :

1) char *pcap_lookupdev(errbuf);
	- if pcap_lookupdev() fails, it will store an error message in errbuf
	The function returns the name of the device to sniff on or NULL in case of error.


2) pcap_t *pcap_open_live(char *device, int snaplen, int promisc, int to_ms, char *ebuf)
	- device, is the interface device (eg, eth0, wlp3s0, etd). 
	- snaplen, is an integer which defines the maximum number of bytes to be captured by pcap. 
	- promisc, when set to true, brings the interface into promiscuous mode.
	- to_ms, is the read time out in milliseconds (a value of 0 means no time out)
	- ebuf, is a string we can store any error messages within. 
	The function returns a session handler.


3) pcap_t *pcap_open_offline(const char *fname, char *errbuf);
	- fname, is the name of the pcap file to be read, it contains precaptured packets.
	- errbuf, is the variable where the error message will be stored.
	The function returns a session handler.


4) int pcap_compile(pcap_t *p, struct bpf_program *fp, char *str, int optimize, bpf_u_int32 netmask)
	- p, is our session handle. 
	- fp, is a reference to the place we will store the compiled version of our filter. 
	- str, is the expression itself, in regular string format. 
	- optimize, is an integer that decides if the expression should be "optimized" or not (0 is false, 1 is true. Standard stuff.) 
	- netmask, the network mask of the network the filter applies to. 
	The function returns -1 on failure; all other values imply success.


5) int pcap_setfilter(pcap_t *p, struct bpf_program *fp)
	- p, is our session handler.
	- fp, is a reference to the compiled version of the expression (presumably the same variable as the second argument to pcap_compile()).
	0 is success, -1 is failure


6) int pcap_lookupnet(const char *device, bpf_u_int32 *netp, bpf_u_int32 *maskp, char *errbuf)
	- device, is the interface device (eg, eth0, wlp3s0, etd). 
	- netp, is the network address.
	- maskp, is the network mask.
	- errbuf, is the variable where error message will be stored.
	0 is success, -1 is failure


7) int pcap_loop(pcap_t *p, int cnt, pcap_handler callback, u_char *user)
	- p, is the packet handler.
	- cnt, is the number of packets to capture.
	- callback, is the name of the function to call, when a packet is captured [written without function signature].
	- user, user specified parameter which will be passed to the callback function.
	0 is success, -1 is failure


8) int pcap_close(pcap_t *p)
	- p, is the packet handle.
	0 is success, -1 is failure

##########################################################################################

SAMPLE OUTPUT :

COMMAND : sudo mydump tcp -s google

iflag = 0, ivalue = (null)
rflag = 0, rvalue = (null)
sflag = 1, svalue = google
Non-option argument tcp
Filter expression is  tcp

2017-10-13 01:17:53.314563 7c:67:a2:f3:7e:dd -> 7c:67:a2:f3:7e:dd type 0x800 len 583
172.24.17.92:48430 -> 172.24.17.92:443 TCP

16 03 01 02 00 01 00 01  fc 03 03 38 53 4a 9f 04    ...........8SJ..
da fd bf dc 2e 27 ab 93  01 90 d2 42 a6 97 c7 29    .....'.....B...)
44 38 9c cb 3d 36 c9 b8  cc be d9 20 a6 8f cf f9    D8..=6..... ....
9e 66 3e 23 86 79 c1 13  e1 1b fc 15 7a 3a 06 a5    .f>#.y......z:..
ee 09 e5 d2 1e 41 a9 87  94 eb 4d c8 00 1c 3a 3a    .....A....M...::
c0 2b c0 2f c0 2c c0 30  cc a9 cc a8 c0 13 c0 14    .+./.,.0........
00 9c 00 9d 00 2f 00 35  00 0a 01 00 01 97 4a 4a    ...../.5......JJ
00 00 ff 01 00 01 00 00  00 00 14 00 12 00 00 0f    ................
70 6c 61 79 2e 67 6f 6f  67 6c 65 2e 63 6f 6d 00    play.google.com.
17 00 00 00 23 00 da 00  6e 69 b6 d9 b2 f7 ed 89    ....#...ni......
24 b0 3a 10 6a 2a e1 94  55 0b 3a c6 9d a9 da ef    $.:.j*..U.:.....
36 79 e1 2e 40 52 29 5c  6c c4 03 72 91 b7 c9 23    6y..@R)\l..r...#
eb 9b ee 94 86 ea 30 7f  ee 45 ed bc f6 96 ec 78    ......0..E.....x
8f 98 c9 0c 4c 3f a2 cf  7d 7c d1 ce 86 29 48 4c    ....L?..}|...)HL
2b 60 7c 61 c4 e7 e4 63  23 f1 6a a7 65 7c a9 4b    +`|a...c#.j.e|.K
68 e4 b2 11 0a d4 35 89  f8 2f 6c 39 ed 67 a0 3a    h.....5../l9.g.:
fd 5e 4e 60 83 98 5e f3  39 f1 f4 36 a7 25 a7 3e    .^N`..^.9..6.%.>
33 32 fd 52 b3 df ed 3e  9d c7 86 4b cf 50 ad 22    32.R...>...K.P."
19 dd 1e 15 c6 60 ef 8b  44 33 a8 30 5c 30 6c 42    .....`..D3.0\0lB
ab 1e a7 04 ce 9a ae 98  2c 22 8f 27 ae 05 0e 63    ........,".'...c
0d 6f 79 45 23 3c 1d 27  b0 9b 7c 1d c4 b4 10 81    .oyE#<.'..|.....
72 d8 5e d7 18 a9 70 a7  9e 1b e1 5c 47 bb bc 7a    r.^...p....\G..z
7c 44 46 31 dd c5 28 49  f0 93 76 e9 26 34 0d 96    |DF1..(I..v.&4..
39 00 0d 00 14 00 12 04  03 08 04 04 01 05 03 08    9...............
05 05 01 08 06 06 01 02  01 00 05 00 05 01 00 00    ................
00 00 00 12 00 00 00 10  00 0e 00 0c 02 68 32 08    .............h2.
68 74 74 70 2f 31 2e 31  00 0b 00 02 01 00 00 0a    http/1.1........
00 0a 00 08 5a 5a 00 1d  00 17 00 18 9a 9a 00 01    ....ZZ..........
00 00 15 00 40 00 00 00  00 00 00 00 00 00 00 00    ....@...........
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00                                      .....


2017-10-13 01:18:30.622981 7c:67:a2:f3:7e:dd -> 7c:67:a2:f3:7e:dd type 0x800 len 271
172.24.17.92:36160 -> 172.24.17.92:443 TCP

16 03 01 00 c8 01 00 00  c4 03 03 5c ed d2 a3 69    ...........\...i
cd 4b dc ac 22 ce 6f d5  bc 87 bd 4a 55 80 1c 1a    .K..".o....JU...
9c 9d f8 e9 0d d6 89 d3  df a1 3a 00 00 1c 5a 5a    ..........:...ZZ
c0 2b c0 2f c0 2c c0 30  cc a9 cc a8 c0 13 c0 14    .+./.,.0........
00 9c 00 9d 00 2f 00 35  00 0a 01 00 00 7f da da    ...../.5........
00 00 ff 01 00 01 00 00  00 00 1a 00 18 00 00 15    ................
75 70 64 61 74 65 2e 67  6f 6f 67 6c 65 61 70 69    update.googleapi
73 2e 63 6f 6d 00 17 00  00 00 23 00 00 00 0d 00    s.com.....#.....
14 00 12 04 03 08 04 04  01 05 03 08 05 05 01 08    ................
06 06 01 02 01 00 05 00  05 01 00 00 00 00 00 12    ................
00 00 00 10 00 0e 00 0c  02 68 32 08 68 74 74 70    .........h2.http
2f 31 2e 31 00 0b 00 02  01 00 00 0a 00 0a 00 08    /1.1............
ea ea 00 1d 00 17 00 18  aa aa 00 01 00             .............


##########################################################################################

COMMAND : sudo mydump udp -r hw1.pcap -s iPhone | head -100

iflag = 0, ivalue = (null)
rflag = 1, rvalue = hw1.pcap
sflag = 1, svalue = iPhone
Non-option argument udp
Filter expression is  udp

2013-01-12 11:40:25.583510 3c:d0:f8:4e:4b:a1 -> 3c:d0:f8:4e:4b:a1 type 0x800 len 342
0.0.0.0:68 -> 0.0.0.0:67 UDP

63 f6 00 02 00 00 00 00  00 00 00 00 00 00 00 00    c...............
00 00 00 00 00 00 3c d0  f8 4e 4b a1 00 00 00 00    ......<..NK.....
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 63 82  53 63 35 01 03 37 06 01    ......c.Sc5..7..
03 06 0f 77 fc 39 02 05  dc 3d 07 01 3c d0 f8 4e    ...w.9...=..<..N
4b a1 32 04 c0 a8 00 0a  33 04 00 76 a7 00 0c 0e    K.2.....3..v....
54 68 6f 6d 61 73 73 2d  69 50 68 6f 6e 65 ff 00    Thomass-iPhone..
00 00 00 00 00 00                                   ......


2013-01-12 11:46:20.803421 3c:d0:f8:4e:4b:a1 -> 3c:d0:f8:4e:4b:a1 type 0x800 len 342
0.0.0.0:68 -> 0.0.0.0:67 UDP

63 f7 00 02 00 00 00 00  00 00 00 00 00 00 00 00    c...............
00 00 00 00 00 00 3c d0  f8 4e 4b a1 00 00 00 00    ......<..NK.....
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 63 82  53 63 35 01 03 37 06 01    ......c.Sc5..7..
03 06 0f 77 fc 39 02 05  dc 3d 07 01 3c d0 f8 4e    ...w.9...=..<..N
4b a1 32 04 c0 a8 00 0a  33 04 00 76 a7 00 0c 0e    K.2.....3..v....
54 68 6f 6d 61 73 73 2d  69 50 68 6f 6e 65 ff 00    Thomass-iPhone..
00 00 00 00 00 00                                   ......


2013-01-12 11:56:41.337354 34:c0:59:9d:1c:79 -> 34:c0:59:9d:1c:79 type 0x800 len 342
0.0.0.0:68 -> 0.0.0.0:67 UDP

1a b1 00 02 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 34 c0  59 9d 1c 79 00 00 00 00    ......4.Y..y....
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 63 82  53 63 35 01 01 37 06 01    ......c.Sc5..7..
03 06 0f 77 fc 39 02 05  dc 3d 07 01 34 c0 59 9d    ...w.9...=..4.Y.
1c 79 33 04 00 76 a7 00  0c 06 69 50 68 6f 6e 65    .y3..v....iPhone
ff 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00                                   ......


2013-01-12 11:56:42.366773 34:c0:59:9d:1c:79 -> 34:c0:59:9d:1c:79 type 0x800 len 342
0.0.0.0:68 -> 0.0.0.0:67 UDP

1a b1 00 03 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 34 c0  59 9d 1c 79 00 00 00 00    ......4.Y..y....
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00    ................
00 00 00 00 00 00 63 82  53 63 35 01 03 37 06 01    ......c.Sc5..7..
03 06 0f 77 fc 39 02 05  dc 3d 07 01 34 c0 59 9d    ...w.9...=..4.Y.
1c 79 32 04 c0 a8 00 07  36 04 c0 a8 00 01 0c 06    .y2.....6.......
69 50 68 6f 6e 65 ff 00  00 00 00 00 00 00 00 00    iPhone..........
00 00 00 00 00 00       